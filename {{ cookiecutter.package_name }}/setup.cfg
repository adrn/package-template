[metadata]
name = {{ cookiecutter.module_name }}
author = {{ cookiecutter.author_name }}
author_email = {{ cookiecutter.author_email }}
license = {{ cookiecutter.license }}
license_file = licenses/LICENSE.rst
url = {{ cookiecutter.project_url }}
description = {{ cookiecutter.short_description }}
long_description = file: README.rst
edit_on_github = {{ cookiecutter.edit_on_github_extension }}
github_project = {{ cookiecutter.github_project }}

[options]
zip_safe = False
packages = find:
python_requires = >={{ cookiecutter.minimum_python_version }}
setup_requires = setuptools_scm
install_requires = {{ cookiecutter._install_requires }}

{% if cookiecutter.include_example_code == 'y' %}
[options.entry_points]
console_scripts =
    astropy-package-template-example = packagename.example_mod:main
{% endif %}

[options.extras_require]
all =
test =
    pytest-astropy
docs =
    sphinx-astropy

[options.package_data]
{{ cookiecutter.module_name }} = data/*

[tool:pytest]
testpaths = "{{ cookiecutter.module_name }}" "docs"
astropy_header = true
doctest_plus = enabled
text_file_format = rst
addopts = --doctest-rst

[coverage:run]
omit =
  {packagename}/_{{ cookiecutter._parent_project }}_init*
  {packagename}/conftest.py
  {packagename}/*setup_package*
  {packagename}/tests/*
  {packagename}/*/tests/*
  {packagename}/extern/*
  {packagename}/version*
  */{packagename}/_{{ cookiecutter._parent_project }}_init*
  */{packagename}/conftest.py
  */{packagename}/*setup_package*
  */{packagename}/tests/*
  */{packagename}/*/tests/*
  */{packagename}/extern/*
  */{packagename}/version*

[coverage:report]
exclude_lines =
  # Have to re-enable the standard pragma
  pragma: no cover
  # Don't complain about packages we have installed
  except ImportError
  # Don't complain if tests don't hit assertions
  raise AssertionError
  raise NotImplementedError
  # Don't complain about script hooks
  def main\(.*\):
  # Ignore branches that don't pertain to this version of Python
  pragma: py{ignore_python_version}
  # Don't complain about IPython completion helper
  def _ipython_key_completions_
